from typing import Callable, Dict
from Process import Process
from NetworkLayer import NetworkLayer
from Message import Message



class World:
    def __init__(self):
        self.processes: Dict[int, Process] = {}
        self.process_functions: Dict[int, str] = {}
        self.network = NetworkLayer()

    def create_process(self, process_id: int):
        if process_id in self.processes:
            print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {process_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        message_queue = self.network.get_message_queue(process_id)
        process = Process(process_id, message_queue)
        self.processes[process_id] = process
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å {process_id} —Å –æ—á–µ—Ä–µ–¥—å—é {message_queue}")

    def assign_function_to_process(self, process_id: int, function_name: str, func: Callable[[Message], None]):
        process = self.processes.get(process_id)
        if process:
            process.add_function(function_name, func)
            self.process_functions[process_id] = function_name
            print(f"üîß –ü—Ä–æ—Ü–µ—Å—Å {process_id} –ø–æ–ª—É—á–∏–ª —Ñ—É–Ω–∫—Ü–∏—é '{function_name}'")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü—Ä–æ—Ü–µ—Å—Å {process_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def assign_function_to_range(self, start_id: int, end_id: int, function_name: str, func: Callable[[Message], None]):
        for pid in range(start_id, end_id + 1):
            self.assign_function_to_process(pid, function_name, func)

    def create_processes_range(self, start_id: int, end_id: int):
        for pid in range(start_id, end_id + 1):
            self.create_process(pid)

    def send_message(self, sender_id: int, receiver_id: int, data: bytes, algorithm: str):
        if sender_id not in self.processes or receiver_id not in self.processes:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ {sender_id} ‚Üí {receiver_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        message = Message(sender_id, receiver_id, data, algorithm)
        self.network.send_message(message)
        print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")

    def start_all_processes(self):
        for process in self.processes.values():
            process.start()
            print(f"üöÄ –ü—Ä–æ—Ü–µ—Å—Å {process.process_id} –∑–∞–ø—É—â–µ–Ω!")

    def stop_all_processes(self):
        for process in self.processes.values():
            process.stop()
            print(f"üõë –ü—Ä–æ—Ü–µ—Å—Å {process.process_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    def __repr__(self):
        return f"<World processes={len(self.processes)}, network_nodes={len(self.network.message_queues)}>"
